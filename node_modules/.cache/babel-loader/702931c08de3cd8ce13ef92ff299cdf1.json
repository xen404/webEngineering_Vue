{"remainingRequest":"/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/node_modules/babel-loader/lib/index.js!/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/node_modules/eslint-loader/index.js??ref--13-0!/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/src/services/ArtmartService.js","dependencies":[{"path":"/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/src/services/ArtmartService.js","mtime":1607793312910},{"path":"/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltIjsKaW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9rYXJ0b24vRG9jdW1lbnRzL3Byb2plY3RzL0NWX0dJVEhVQi9hNC1ncm91cC02Mi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9rYXJ0b24vRG9jdW1lbnRzL3Byb2plY3RzL0NWX0dJVEhVQi9hNC1ncm91cC02Mi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CnZhciBBUlRNQVJUX0JBU0VfVVJMID0gJ2h0dHBzOi8vd2ViLWVuZ2luZWVyaW5nLmJpZy50dXdpZW4uYWMuYXQvczIwL2E0JzsKZXhwb3J0IGZ1bmN0aW9uIGdldEFydHdvcmtzKCkgewogIHJldHVybiBfZ2V0QXJ0d29ya3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2dldEFydHdvcmtzKCkgewogIF9nZXRBcnR3b3JrcyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgIHZhciBxdWVyeSwKICAgICAgICBxLAogICAgICAgIHJlcywKICAgICAgICBfYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgcXVlcnkgPSBfYXJncy5sZW5ndGggPiAwICYmIF9hcmdzWzBdICE9PSB1bmRlZmluZWQgPyBfYXJnc1swXSA6ICcnOwogICAgICAgICAgICBxID0gcXVlcnkudHJpbSgpID09ICcnID8gJycgOiAnP3E9JyArIHF1ZXJ5LnRyaW0oKTsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgIHJldHVybiBmZXRjaChBUlRNQVJUX0JBU0VfVVJMICsgJy9hcnR3b3JrcycgKyBxKTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICBpZiAocmVzLm9rKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFtdKTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlcy5qc29uKCkpOwoKICAgICAgICAgIGNhc2UgODoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CiAgcmV0dXJuIF9nZXRBcnR3b3Jrcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnQgZnVuY3Rpb24gZ2V0QXJ0d29yayhfeCkgewogIHJldHVybiBfZ2V0QXJ0d29yay5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfZ2V0QXJ0d29yaygpIHsKICBfZ2V0QXJ0d29yayA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoYXJ0d29ya0lkKSB7CiAgICB2YXIgcmVzOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gZmV0Y2goQVJUTUFSVF9CQVNFX1VSTCArICcvYXJ0d29ya3MvJyArIGFydHdvcmtJZCk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXMgPSBfY29udGV4dDIuc2VudDsKCiAgICAgICAgICAgIGlmIChyZXMub2spIHsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBudWxsKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCByZXMuanNvbigpKTsKCiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyKTsKICB9KSk7CiAgcmV0dXJuIF9nZXRBcnR3b3JrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBnZXRDYXJ0KCkgewogIHJldHVybiBfZ2V0Q2FydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfZ2V0Q2FydCgpIHsKICBfZ2V0Q2FydCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICB2YXIgcmVzOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gZmV0Y2goQVJUTUFSVF9CQVNFX1VSTCArICcvY2FydCcsIHsKICAgICAgICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmVzID0gX2NvbnRleHQzLnNlbnQ7CgogICAgICAgICAgICBpZiAocmVzLm9rKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA2OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PSA0MDMpIHsKICAgICAgICAgICAgICAvLyBOT1RFOiB0aGlzIGRvZXMgbm90IGFjdHVhbGx5IHdvcmsgaWYgdGhlIGNvb2tpZSB3YXMgc2V0IGZyb20gYSBkaWZmZXJlbnQgZG9tYWluCiAgICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gJ3Nlc3Npb25JZD07IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQnOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgW10pOwoKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHJlcy5qc29uKCkpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTMpOwogIH0pKTsKICByZXR1cm4gX2dldENhcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGFkZFRvQ2FydChfeDIpIHsKICByZXR1cm4gX2FkZFRvQ2FydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfYWRkVG9DYXJ0KCkgewogIF9hZGRUb0NhcnQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KHByb2R1Y3QpIHsKICAgIHZhciByZXM7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiBmZXRjaChBUlRNQVJUX0JBU0VfVVJMICsgJy9jYXJ0JywgewogICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLAogICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHByb2R1Y3QpCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmVzID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCByZXMub2spOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTQpOwogIH0pKTsKICByZXR1cm4gX2FkZFRvQ2FydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnQgZnVuY3Rpb24gZGVsZXRlQ2FydEl0ZW0oX3gzKSB7CiAgcmV0dXJuIF9kZWxldGVDYXJ0SXRlbS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfZGVsZXRlQ2FydEl0ZW0oKSB7CiAgX2RlbGV0ZUNhcnRJdGVtID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNShjYXJ0SXRlbUlkKSB7CiAgICB2YXIgcmVzOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gZmV0Y2goQVJUTUFSVF9CQVNFX1VSTCArICcvY2FydC8nICsgY2FydEl0ZW1JZCwgewogICAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsCiAgICAgICAgICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJwogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0NS5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgcmVzLm9rKTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWU1KTsKICB9KSk7CiAgcmV0dXJuIF9kZWxldGVDYXJ0SXRlbS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnQgZnVuY3Rpb24gY2hlY2tvdXQoX3g0KSB7CiAgcmV0dXJuIF9jaGVja291dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfY2hlY2tvdXQoKSB7CiAgX2NoZWNrb3V0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNihjdXN0b21lcikgewogICAgdmFyIHJlczsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIGZldGNoKEFSVE1BUlRfQkFTRV9VUkwgKyAnL2NhcnQvY2hlY2tvdXQnLCB7CiAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsCiAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoY3VzdG9tZXIpCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmVzID0gX2NvbnRleHQ2LnNlbnQ7CgogICAgICAgICAgICBpZiAocmVzLm9rKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA1OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgbnVsbCk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgcmVzLmpzb24oKSk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNik7CiAgfSkpOwogIHJldHVybiBfY2hlY2tvdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGdldEZyYW1lcygpIHsKICByZXR1cm4gX2dldEZyYW1lcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfZ2V0RnJhbWVzKCkgewogIF9nZXRGcmFtZXMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgdmFyIHJlcywgZnJhbWVzLCBfaXRlcmF0b3IsIF9zdGVwLCBmcmFtZTsKCiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiBmZXRjaChBUlRNQVJUX0JBU0VfVVJMICsgJy9mcmFtZXMnKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Ny5zZW50OwoKICAgICAgICAgICAgaWYgKHJlcy5vaykgewogICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gNTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIFtdKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gNzsKICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBmcmFtZXMgPSBfY29udGV4dDcuc2VudDsKICAgICAgICAgICAgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZnJhbWVzKTsKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICAgIGZyYW1lID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICAgICAgICBmcmFtZS50aHVtYkltYWdlID0gIiIuY29uY2F0KEFSVE1BUlRfQkFTRV9VUkwsICIvZnJhbWVzLyIpLmNvbmNhdChmcmFtZS5zdHlsZSwgIi90aHVtYkltYWdlIik7CiAgICAgICAgICAgICAgICBmcmFtZS5ib3JkZXJJbWFnZSA9ICIiLmNvbmNhdChBUlRNQVJUX0JBU0VfVVJMLCAiL2ZyYW1lcy8iKS5jb25jYXQoZnJhbWUuc3R5bGUsICIvYm9yZGVySW1hZ2UiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIGZyYW1lcyk7CgogICAgICAgICAgY2FzZSAxMToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTcpOwogIH0pKTsKICByZXR1cm4gX2dldEZyYW1lcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnQgZnVuY3Rpb24gZ2V0TWF0cygpIHsKICByZXR1cm4gX2dldE1hdHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2dldE1hdHMoKSB7CiAgX2dldE1hdHMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU4KCkgewogICAgdmFyIHJlczsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDgucHJldiA9IF9jb250ZXh0OC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIGZldGNoKEFSVE1BUlRfQkFTRV9VUkwgKyAnL21hdHMnKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0OC5zZW50OwoKICAgICAgICAgICAgaWYgKHJlcy5vaykgewogICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoInJldHVybiIsIFtdKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguYWJydXB0KCJyZXR1cm4iLCByZXMuanNvbigpKTsKCiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWU4KTsKICB9KSk7CiAgcmV0dXJuIF9nZXRNYXRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBnZXRTaGlwcGluZygpIHsKICByZXR1cm4gX2dldFNoaXBwaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9nZXRTaGlwcGluZygpIHsKICBfZ2V0U2hpcHBpbmcgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU5KCkgewogICAgdmFyIHJlczsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIGZldGNoKEFSVE1BUlRfQkFTRV9VUkwgKyAnL3NoaXBwaW5nJyk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXMgPSBfY29udGV4dDkuc2VudDsKCiAgICAgICAgICAgIGlmIChyZXMub2spIHsKICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuYWJydXB0KCJyZXR1cm4iLCB7fSk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LmFicnVwdCgicmV0dXJuIiwgcmVzLmpzb24oKSk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlOSk7CiAgfSkpOwogIHJldHVybiBfZ2V0U2hpcHBpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQ=="},{"version":3,"sources":["/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/src/services/ArtmartService.js"],"names":["ARTMART_BASE_URL","getArtworks","query","q","trim","fetch","res","ok","json","getArtwork","artworkId","getCart","credentials","status","document","cookie","addToCart","product","method","headers","body","JSON","stringify","deleteCartItem","cartItemId","checkout","customer","getFrames","frames","frame","thumbImage","style","borderImage","getMats","getShipping"],"mappings":"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","sourcesContent":["const ARTMART_BASE_URL = 'https://web-engineering.big.tuwien.ac.at/s20/a4';\n\nexport async function getArtworks(query = '') {\n    const q = query.trim() == '' ? '' : '?q=' + query.trim();\n    const res = await fetch(ARTMART_BASE_URL + '/artworks' + q);\n    if (!res.ok) {\n        return []\n    }\n    return res.json();\n}\n\nexport async function getArtwork(artworkId) {\n    const res = await fetch(ARTMART_BASE_URL + '/artworks/' + artworkId);\n    if (!res.ok) {\n        return null;\n    }\n    return res.json();\n}\n\nexport async function getCart() {\n    const res = await fetch(ARTMART_BASE_URL + '/cart', { credentials: 'include' });\n    if (!res.ok) {\n        if (res.status == 403) {\n            // NOTE: this does not actually work if the cookie was set from a different domain\n            document.cookie = 'sessionId=; expires=Thu, 01 Jan 1970 00:00:00 GMT';\n        }\n        return []\n    }\n    return res.json();\n}\n\nexport async function addToCart(product) {\n    const res = await fetch(ARTMART_BASE_URL + '/cart', {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(product)\n    });\n    return res.ok;\n}\n\nexport async function deleteCartItem(cartItemId) {\n    const res = await fetch(ARTMART_BASE_URL + '/cart/' + cartItemId, {\n        method: 'DELETE',\n        credentials: 'include'\n    });\n    return res.ok\n}\n\nexport async function checkout(customer) {\n    const res = await fetch(ARTMART_BASE_URL + '/cart/checkout', {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(customer)\n    })\n    if (!res.ok) {\n        return null;\n    }\n    return res.json();\n}\n\nexport async function getFrames() {\n    const res = await fetch(ARTMART_BASE_URL + '/frames');\n    if (!res.ok) {\n        return []\n    }\n    const frames = await res.json();\n    for (const frame of frames) {\n        frame.thumbImage = `${ARTMART_BASE_URL}/frames/${frame.style}/thumbImage`\n        frame.borderImage = `${ARTMART_BASE_URL}/frames/${frame.style}/borderImage`\n    }\n    return frames;\n}\n\nexport async function getMats() {\n    const res = await fetch(ARTMART_BASE_URL + '/mats');\n    if (!res.ok) {\n        return []\n    }\n    return res.json();\n}\n\nexport async function getShipping() {\n    const res = await fetch(ARTMART_BASE_URL + '/shipping');\n    if (!res.ok) {\n        return {}\n    }\n    return res.json();\n}\n"]}]}