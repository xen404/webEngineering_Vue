{"remainingRequest":"/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/src/components/FramedArtwork.vue?vue&type=style&index=0&id=517170dd&scoped=true&lang=css&","dependencies":[{"path":"/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/src/components/FramedArtwork.vue","mtime":1607793312907},{"path":"/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/karton/Documents/projects/CV_GITHUB/a4-group-62/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgppbWcgewogIGJvcmRlcjogMHB4IHNvbGlkIGJsYWNrOyAvKiBuZWNlc3NhcnkgZm9yIENocm9tZSAmIEZpcmVmb3ggKi8KfQo="},{"version":3,"sources":["FramedArtwork.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA;AACA;AACA","file":"FramedArtwork.vue","sourceRoot":"src/components","sourcesContent":["<template slot=\"framed-artwork\">\n  <img :src=\"artwork.image\" alt=\"artwork.title\" ref=\"previewImage\" @load=\"onImageLoad\" />\n</template>\n\n<script>\nexport default {\n  name: \"FramedArtwork\",\n  props: {\n    artwork: {\n      image: String,\n      title: String\n    },\n    config: {\n      printSize: String,\n      frameStyle: String,\n      matColor: String\n    }\n  },\n  data() {\n    return {\n      printSizes: { S: [0, 0], M: [0, 0], L: [0, 0] }\n    };\n  },\n  computed: {\n    frame() {\n      return this.$store.state.frames.get(this.config.frameStyle);\n    },\n    mat() {\n      return this.$store.state.mats.get(this.config.matColor);\n    }\n  },\n  watch: {\n    config: {\n      deep: true,\n      handler() {\n        this.renderPreview();\n      }\n    }\n  },\n  methods: {\n    onImageLoad() {\n      this.calculatePrintSizes();\n      this.renderPreview();\n    },\n    calculatePrintSizes() {\n      const img = this.$refs.previewImage;\n      const w = img.naturalWidth;\n      const h = img.naturalHeight;\n\n      let S = [297, 297]; // A4\n      let M = [420, 420]; // A3\n      let L = [594, 594]; // A2\n\n      if (h > w) {\n        S[0] = Math.floor((w * S[1]) / h);\n        M[0] = Math.floor((w * M[1]) / h);\n        L[0] = Math.floor((w * L[1]) / h);\n      } else {\n        S[1] = Math.floor((h * S[0]) / w);\n        M[1] = Math.floor((h * M[0]) / w);\n        L[1] = Math.floor((h * L[0]) / w);\n      }\n\n      this.printSizes = { S, M, L };\n      this.$emit(\"print-sizes\", this.printSizes);\n    },\n    renderPreview() {\n      const img = this.$refs.previewImage;\n      const container = img.parentNode;\n\n      const [w, h] = this.printSizes[this.config.printSize];\n      const matWidth = this.config.matWidth;\n      const frameWidth = this.config.frameWidth;\n\n      let x;\n      if (w > h) {\n        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);\n      } else {\n        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);\n      }\n\n      img.style.boxSizing = \"border-box\";\n      img.width = (w + 2 * matWidth + 2 * frameWidth) * x;\n      img.height = (h + 2 * matWidth + 2 * frameWidth) * x;\n      img.style.borderImageSource = `url(${this.frame.borderImage}`;\n      img.style.borderImageSlice = this.frame.slice;\n      img.style.borderWidth = `${frameWidth * x}px`;\n      img.style.backgroundColor = this.mat.hex;\n      img.style.padding = `${matWidth * x}px`;\n    }\n  }\n};\n</script>\n\n<style scoped>\nimg {\n  border: 0px solid black; /* necessary for Chrome & Firefox */\n}\n</style>\n"]}]}